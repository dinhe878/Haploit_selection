/*
Model name: alternation of generations (nucleotide-enabled)

28 April 2021
Authors: Ding He, Ben Haller

Model description:
This model simulates diploid individuals and haploid gametes alternately, representing alternation of generations of sexual reproduction in animals (but may be extending to other organisms). The recombination is controlled within the script, not relied on SLiM default engine. The diploid adults are kepted in one subpop (p1) and haploid gametes in another (p2). This setup enables a easy way to introduce non-neutral mutations (selection) in a variety of ways at diploid/haploid level.

Although this is a non-Wright-Fisher (nonWF) model, we constrain strick non-overlapping generations and keep the diploid population p1 size stable (fluctuating around the population carrying capacity) for simplicity. This could be modified later if more realistic/complex scenarios are desired.

"M" represents male/sperm and "F" female/egg, which could be removed for a model of hermaphroditic gametes. The sex ratio at diploid level is now ~ 1:1.

The code for nucleotide: A=0, C=1, G=2, T=3

The main output of the model is records of males and sperms. Each line represents one male or sperm. The spec of the line is:

For male:
M|Tag#|Sim_gen#|Diploid genone 1 or 2|Breakpoint positions|(B)enficial/(D)eleterious mutation positions or Neu|All mutation (SNP) positions|Nucleotide code string of all mutations (SNPs)
For sperm:
S|Tag#|Sim_gen#|Haploid genome tetrad 1/2/3/4|Breakpoint positions|# of breakpoint|(B)enficial/(D)eleterious mutation positions or Neu|All mutation (SNP) positions|Nucleotide code string of all mutations (SNPs)

Examples:
1. Male (tag 1) genome1 without beneficial/deleterious mutation:
M|1|20000|1|0|B 19620|13094 16436 18118 18599 18681 19593 19620...|0 2 0 1 1 3 2...
2. Sperm (tag 1) tetrad genome1 without beneficial/deleterious mutation:
S|1|20000|1|248870|1|Neu|159 1196 4355 5695 6304 20780...|0 2 0 1 1 2...

Although the records are stored in order of Male-within_ejaculate_sperms batches, all individuals of the founding population  (p1) are uniquely tagged and all sperms inherit tags from their father, and all offsprings (diploid) inherit tags of their fertilized-sperms. In other words, the tags track the paternal pedigree. Since we are storing every male and every sperm for a desired number of generations, the size of output data depends on founding population size, genome length, number of times of meosis (which dertermines how many sperms) and the number of generations stored.

[Controlable genetic mechanisms]
1. Recombination.
Currently, the recombination during the burn-in phase and alternation phase is both SLiM-controlled via only the recombination rate (R). Apparently we could add more complex (realistic) recombination maps to govern the recombination further.
2. Genomic element structure.
Currently, the model holds the simplist structure (no structure just a long stretch of seq). Apparently we could add more complex (realistic) structures (genes, intron-exon, non-coding regions...etc).

Most of the simulating parameters can be passed via the commandline:

k, carrying capacity (diploid) / founding population size
MU, mutation rate
R, recombination rate
L, chromosome length
out_file, output file path and name
mc, meiosis count per diploid individual
ST, selection type: (b)enefiical, (d)eleterious, (n)eutral
SC, non-neutral selection scenario: (h)aploid-only, (d)iploid-only, (b)oth, (n)eutral

*/

initialize()
{
	// turn on nonWF model
	initializeSLiMModelType("nonWF");
	
	// set working dir
	setwd("~/Desktop/Hap-SLiM_project");

	// turn on nucleotide simulation mode, and potential speed-up with mutationRuns=16
	initializeSLiMOptions(mutationRuns=32, nucleotideBased=T);

	if (exists("slimgui"))
	{
		defineConstant("K", 500);     // carrying capacity (diploid)
		defineConstant("MU", 1e-5);   // mutation rate
		defineConstant("R", 1e-8);    // recombination rate
		defineConstant("L", initializeAncestralNucleotides("D_rerio_ch25_excl_N_1MB.split.10Kmer.fasta"));  // ancestral seq from a fasta file
		defineConstant("out_file", "slimout");	// output file name
		defineConstant("mc", 50);		// meiosis count per diploid individual
		defineConstant("ST", "b");	// selection type: (b)enefiical, (d)eleterious, (n)eutral
		defineConstant("SC", "h");	// non-neutral selection scenario: (h)aploid-only, (d)iploid-only, (b)oth, (n)eutral
		defineConstant("BP", "n");	// "n": no crossing-over; (Integer>0) user-defined numbers of crossing-over; "s": numbers of crossing-over based on recombination rate
		defineConstant("GS", F);    // does the chromosome have genomic structures? True/False
		defineConstant("NonCodingLen", 5000);    // Noncoding region length
		defineConstant("IntronLen", 500);    // Intron region length
		defineConstant("ExonLen", 300);    // Exon region length
		defineConstant("MaleSpermSampleCount", 50);    // Number of males' within-ejaculate sperm pop will be sampled and output as  fasta format
		defineConstant("PerMaleSpermSampleCount", 100);    // Number of sperms per maleswill be sampled and output as  fasta format
		defineConstant("GrandOutput", F);    // Write the big final output or not?
	} else {
		if (!exists("in_file")) defineConstant("in_file", "D_rerio_ch25_excl_N_1MB.split.10Kmer.fasta");	// input file name: ancestral seq from a fasta file
		defineConstant("L", initializeAncestralNucleotides(in_file));  // genome length
		if (!exists("out_file")) defineConstant("out_file", "slimout");
		if (!exists("K")) defineConstant("K", 500);
		if (!exists("mc")) defineConstant("mc", 250);
		if (!exists("MU")) defineConstant("MU", 1e-4);
		if (!exists("R")) defineConstant("R", 1e-8);
		if (!exists("ST")) defineConstant("ST", "n");
		if (!exists("SC")) defineConstant("SC", "n");
		if (!exists("BP")) defineConstant("BP", "s");
		if (!exists("GS")) defineConstant("GS", F);
		if (!exists("NonCodingLen")) defineConstant("NonCodingLen", 5000);
		if (!exists("IntronLen")) defineConstant("IntronLen", 500);
		if (!exists("ExonLen")) defineConstant("ExonLen", 300);
		if (!exists("MaleSpermSampleCount")) defineConstant("MaleSpermSampleCount", 1);
		if (!exists("PerMaleSpermSampleCount")) defineConstant("PerMaleSpermSampleCount", 100);
		if (!exists("GrandOutput")) defineConstant("GrandOutput", F);
	}

	// nucleotide interchangability matrix
	// note that the global mutation rate will be 3*MU due to nucleotide interchangability matrix
	mm = mmJukesCantor(MU);

	// specify modeling of autosome
	initializeSex("A");
	// first set up neutral mutation type
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);		// neutral
	//m1.convertToSubstitution = T;

	// set up selection scenarios
	if (ST == "b") {
		catn("***Selection after burn-in: beneficial***");
		initializeMutationTypeNuc("m6", 1.0, "f", 0.1);		// full dominant (h=1.0) strongly beneficial (s=0.1)
	} else if (ST == "d") {
		catn("***Selection after burn-in: deleterious***");
		initializeMutationTypeNuc("m6", 1.0, "f", -0.01);	// full dominant (h=1.0) slightly deleterious (s=-0.01)
	} else {
		catn("***Selection after burn-in: neutral***");
		initializeMutationTypeNuc("m6", 0.5, "f", 0.0);		// this neutral mutation type won't be used, just for the coding convenience and to avoid error messages
	}
	// give m6 a color
	m6.color = "green";
	
	// if wish, set up genomic structures
	if (GS)
	{
		// set up other mutation types
		initializeMutationTypeNuc("m3", 0.5, "f", 0.0);         // synonymous
		initializeMutationTypeNuc("m4", 0.1, "g", -0.03, 0.2);  // deleterious
		initializeMutationTypeNuc("m5", 0.8, "e", 0.05);         // beneficial

		initializeGenomicElementType("g1", c(m3,m4,m5), c(2,8,0.1), mm);  // exon; often suffer deleterious mutations, sometimes get neutral (synonymous) mutations, and very rarely get beneficial mutations
		g1.color = "blue";

		initializeGenomicElementType("g2", c(m1,m4), c(9,1), mm);       // intron; often get neutral (non-coding) mutations, and occasionally get deleterious mutations
		g2.color = "lightblue";
		initializeGenomicElementType("g3", m1, 1, mm);           // non-coding; neutral (non-coding) mutations only
		g3.color = "black";

		base = 0;

		while (base < L-5001)
		{
			// start a gene structure
			// make the 1st non-coding region of a fixed 5000 bp length
			initializeGenomicElement(g3, base, base + NonCodingLen - 1);
			base = base + NonCodingLen;

			// make the 1st (fixed length) exon
			initializeGenomicElement(g1, base, base + ExonLen - 1);
			base = base + ExonLen;

			// make additional intron-exon pairs a fix of 5-5
			for (k in 1:5)
			{
				initializeGenomicElement(g2, base, base + IntronLen - 1);
				base = base + IntronLen;

				initializeGenomicElement(g1, base, base + ExonLen - 1);
				base = base + ExonLen;
			}
		}
		// final non-coding region
		initializeGenomicElement(g3, base, L - 1);
	}
	else
	{
		//initializeGenomicElementType("g1", c(m1,m6), c(9,1), mm);
		initializeGenomicElementType("g1", m1, 1, mm);
		initializeGenomicElement(g1, 0, L-1);
	}
	initializeRecombinationRate(R);
}

// generations 1-19999 are burn-in phase
1:1999 reproduction(p1)
{
	// generate K offspring with randomly chosen parents
	for (i in seqLen(K))	{
		Father = subpop.sampleIndividuals(1, sex="M");
		Mother = subpop.sampleIndividuals(1, sex="F");
		child = subpop.addCrossed(Mother, Father);
	}
		// done generating all offsprings, don't call us again this generation
		self.active = 0;
}

1 early()
{
	catn("*****Burn-in is starting*****\n");
	defineConstant("simID", getSeed());
	sim.addSubpop("p1", K);			// diploid population
	sim.addSubpop("p2", 0);			// collective haploid population
}

1:1999 early()
{
	// non-overlapping generations
	inds = p1.individuals;
	adults = inds[inds.age > 0];
	adults.fitnessScaling = 0.0;

	// report generation progress
	if (sim.generation % 100 == 0) catn("gen: " + sim.generation);
}

1999 late()
{
	// all males get a non-zero unique tag value
	males = p1.subsetIndividuals(sex="M");
	males.tag = 1:males.length();
	catn("*****Burn-in is completed*****\n");
}

2000:2150 reproduction(p1)
{
	g_1 = genome1;
	g_1_mut_value = paste(g_1.mutations.nucleotideValue);
	g_1_mut_pos = paste(g_1.mutations.position);

	if (ST == "b") { g_1_nonNeu_mut_pos = paste(c("B", g_1.positionsOfMutationsOfType(m6))); }
	else if (ST == "d") { g_1_nonNeu_mut_pos = paste(c("D", g_1.positionsOfMutationsOfType(m6))); }
	else { g_1_nonNeu_mut_pos = "Neu"; }
	
	g_2 = genome2;
	g_2_mut_value = paste(g_2.mutations.nucleotideValue);
	g_2_mut_pos = paste(g_2.mutations.position);

	if (ST == "b") { g_2_nonNeu_mut_pos = paste(c("B", g_2.positionsOfMutationsOfType(m6))); }
	else if (ST == "d") { g_2_nonNeu_mut_pos = paste(c("D", g_2.positionsOfMutationsOfType(m6))); }
	else { g_2_nonNeu_mut_pos = "Neu"; }
	
	// meiosis	
	for (meiosisCount in 1:mc)
		{
			if (individual.sex == "M")
			{
				if (BP == "s") { breaks = sim.chromosome.drawBreakpoints(individual); }
				else if (BP == "n") { breaks = sim.chromosome.drawBreakpoints(individual, n = 0); }
				else { breaks = sim.chromosome.drawBreakpoints(individual, n = BP); }

				s_1 = p2.addRecombinant(g_1, g_2, breaks, NULL, NULL, NULL, "M");
				s_2 = p2.addRecombinant(g_2, g_1, breaks, NULL, NULL, NULL, "M");
			
				if (BP == "s") { breaks = sim.chromosome.drawBreakpoints(individual); }
				else if (BP == "n") { breaks = sim.chromosome.drawBreakpoints(individual, n = 0); }
				else { breaks = sim.chromosome.drawBreakpoints(individual, n = BP); }

				s_3 = p2.addRecombinant(g_1, g_2, breaks, NULL, NULL, NULL, "M");
				s_4 = p2.addRecombinant(g_2, g_1, breaks, NULL, NULL, NULL, "M");
				
				// within-ejaculate sperms inherit the tag from their father 
				c(s_1, s_2, s_3, s_4).tag = individual.tag;
			} else if (individual.sex == "F")
			{
				breaks = sim.chromosome.drawBreakpoints(individual);
				if (runif(1) <= 0.5)
				{
					e = p2.addRecombinant(g_1, g_2, breaks, NULL, NULL, NULL, "F");
				} else
				{
					e = p2.addRecombinant(g_2, g_1, breaks, NULL, NULL, NULL, "F");
				}
			}
		}
}

2000:2150 reproduction(p2)
{
	// initially, all sperms will have inherited tags of 1:pop_size; we will switch them to 0
	// when they get used to fertilize an egg, so that they are only used once
	// We also need to increase mating success for the fitter sperms
	// for now, limit K eggs to be fertilized to maintain population size K
	sperms = p2.subsetIndividuals(sex="M");
	eggs =  p2.subsetIndividuals(sex="F");
	select_e = sample(eggs, K);
	for (e in select_e)
	{
		do { s = sample(sperms, 1, weights=p2.cachedFitness(sperms.index)); } while ( s.tag == 0 );
		child = p1.addRecombinant(e.genome1, NULL, NULL, s.genome1, NULL, NULL);
		// tag 0 for used sperms
		s.tag = 0;
	}
	// disable this callback for this generation
	self.active = 0;
}

// this mutation callback turns all neutral mutation (m1) arised for p2 (haploid individuals) of the focal generation to non-neutral (m6) when haploid selection mode is active
2000:2150 mutation(m1, p2)
{
	if (SC == "h" | SC == "b")
	{
		if (ST == "b" | ST == "d")
		{
			mut.setMutationType(m6);
			mut.setSelectionCoeff(0.1);		
		}
	}
	return T;
}

// this mutation callback turns all neutral mutation (m1) arised for p1 (diploid individuals) of the focal generation to non-neutral (m6) when diploid selection mode is active
2000:2150 mutation(m1, p1)
{
	if (SC == "d" | SC == "b")
	{
		if (ST == "b" | ST == "d")
		{
			mut.setMutationType(m6);
			mut.setSelectionCoeff(0.1);		
		}
	}
	return T;
}


2000:2150 early()
{
	if (sim.generation % 2 == 0)
	{
		catn("*****Haploid phase*****");
		// purge p1 (diploid individuals) for strict non-overlaping generations
		p1.fitnessScaling = 0.0;

		// check the existence of non neutral mutations
		sperms = p2.subsetIndividuals(sex="M");		
		sperm_nonNeu_mut = sperms.genomes.mutationsOfType(m6);
		if (sum(sperms.genomes.countOfMutationsOfType(m6)) > 0)
		{
			catn(c("# Non-neutral mutations count in sperm: ", size(sperm_nonNeu_mut)));
		}
		
//		// output the selected sperm pop to genome fasta files every 10/50 generations
//		if ((sim.generation % 2 == 0 & sim.generation > 2000 & sim.generation <= 2010)|(sim.generation % 10 == 0 & sim.generation > 2010))
//		{
//			count = MaleSpermSampleCount;
//			// pick 50 sperm subpops
//			while (count > 0)
//			{
//				// pick a tag (representing within-ejaculate sperm subpop				
//				sperm_s = p2.sampleIndividuals(100, sex="M", tag = count);
//				for (ind in sperm_s)
//					{
//						writeFile(simID+".gen"+sim.generation+".fa", c(">"+ind.index+"_male_"+asString(ind.tag), ind.genome1.nucleotides()), append = T);
//					}
//				count = count - 1;
//			}
//		}
	} else 
		{
			catn("*****Diploid phase*****");
			// purge p2 (haploid individuals)
			p2.fitnessScaling = 0.0;
			diploid_nonNeu_mut = p1.genomes.mutationsOfType(m6);
			catn(c("# Non-neutral mutations count in diploid population: ", size(diploid_nonNeu_mut)));
		}
}

2000:2150 late()
{
	if (sim.generation % 2 == 0)
	{
		// do some reporting
		sperms = p2.subsetIndividuals(sex="M");
		eggs = p2.subsetIndividuals(sex="F");
		catn(c(sim.generation, "late(): total", size(sperms), "sperms"));
		catn(c(sim.generation, "late(): total", size(eggs), "eggs"));
		writeFile(simID+"_sperms_fitness", paste(sim.generation + " sperm mean fitness = " + mean(p2.cachedFitness(sperms.index))), append = T);
		//catn("haploid population heterozygosity = " + asString(calcHeterozygosity(sperms.genomes)) + "\n");
		writeFile(simID+"_sperms_Theta", paste(sim.generation + " sperm Theta = " + asString(calcWattersonsTheta(sperms.genomes))), append = T);

	} else
		{	
			// do some reporting
			males = p1.subsetIndividuals(sex="M");
			females = p1.subsetIndividuals(sex="F");
			catn(c(sim.generation, "late(): total", size(males), "males"));
			catn(c(sim.generation, "late(): total", size(females), "females"));
			catn(c(sim.generation, "late(): total", p1.individualCount, "individuals"));
			writeFile(simID+"_diploid_fitness", paste(sim.generation + " diploid mean fitness = " + mean(p1.cachedFitness(NULL))), append = T);
			writeFile(simID+"_diploid_heterozygosity", paste(sim.generation + " diploid heterozygosity = " + asString(calcHeterozygosity(p1.genomes))), append = T);
			catn("diploid population heterozygosity = " + asString(calcHeterozygosity(p1.genomes)) + "\n");
			writeFile(simID+"_diploid_Theta", paste(sim.generation + " diploid Theta = " + asString(calcWattersonsTheta(p1.genomes))), append = T);
			// retag diploid males			
			males.tag = 1:males.length();
		}
}

2150 late() { sim.simulationFinished(); }