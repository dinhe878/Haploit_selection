/*
Diploid-haploid alternation model
29 November 2018
Authors: Ding He, Ben Haller

Description:
This script models diploid individuals and haploid gametes alternately, using addRecombinant() to generate them with the additional control it provides. The generation of recombination breakpoints are controlled by script not SLiM (this is something that could perhaps be facilitated by a new method on Chromosome). The adults are kepted in one subpop and gametes in another, so the selection can be introduced in either/both diploid/haploid phases.

Although this is a non-Wright-Fisher (nonWF) model, we constrain non-overlapping generations and constant population size as a WF-like behavior for simplicity. This can be modified later if more realistic/complex scenarios are desired.

This is a sexual model at the diploid stage, and "M" also represents sperm and "F" eggs; that could be removed, for a model of hermaphroditic gametes. The sex ratio is now ~ 50/50.

The output for this script is within-ejaculate sperm SNPs (mutational positions) that represent their genetic variations.
*/
initialize()
{
	defineConstant("K", 500);		// carrying capacity (diploid)
	defineConstant("MU", 1e-7);	// mutation rate
	defineConstant("R", 1e-7);		// recombination rate
	defineConstant("L1", 1e6-1);	// chromosome last position (length - 1)
	defineConstant("MeioC", 250);	// meiosis count per diploid individual
	defineConstant("SeedMaleNum", 1);	// number(s) of male to produce sperm during the alternation phase
	
	initializeSLiMModelType("nonWF");
	initializeSex("A");
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	initializeMutationType("m2", 1.0, "f", 0.5);		// dominant beneficial
	m2.convertToSubstitution = T;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L1);
	initializeRecombinationRate(R);
}

// Burn-in phase
1:20000 reproduction(p1)
{
	for (i in seqLen(K))
	{
		Father = subpop.sampleIndividuals(1, sex="M");
		Mother = subpop.sampleIndividuals(1, sex="F");
		child = subpop.addCrossed(Mother, Father);
	}
	self.active = 0;	// done generating all offsprings, don't call us again this generation
}

1 early()
{
	sim.addSubpop("p1", K);		// start p1 with K diploid adults
	sim.addSubpop("p2", 0);		// start p2 with 0 haploid gametes
}

1:20000 early()
{
	// non-overlapping generations
	inds = p1.individuals;
	adults = inds[inds.age > 0];
	adults.fitnessScaling = 0.0;
	
	// introduce beneficial mutations
	mutant = sample(p1.individuals.genomes, 10);	// 10 genomes (1% of p1 2*500 genomes)
	mutant.addNewDrawnMutation(m2, 100000);
}

/*
late ()
{
	// check for whether the generations are overlapping
	catn(sim.generation + ": " + paste(sort(p1.individuals.age)));
}
*/

20000 late()
{	
	// tag the randomly selected individual(s) so their producing within-ejaculate sperms will be output
	outputInd = p1.sampleIndividuals(SeedMaleNum, sex="M");
	outputInd.tag = 1;
}

// p1, diploid individuals, reproduces by generating haploid gametes into p2
20001 reproduction(p1)
{
	// each diploid undergo meiosis #times (according to the pre-difined "MeioC" parameter)
	// this could depend on genetics, or be drawn from a Poisson, or whatever
	// since every egg in this model reproduces, this is the female litter size,
	// so it should be >= 2 to ensure population viability	
	for (meiosisCount in 1:MeioC)
	{
		// we're modeling alternation of generations in ferns, which just release
		// gametes into their environment; there is no "mate choice" at the
		// diploid stage, so we just generate gametes from the focal individual	
		if (individual.sex == "M")
		{
			// a male will generate four sperm per meiosis (two unrelated symmetric pairs)
			break_count_1 = rpois(1, R * (L1+1));
			breaks_1 = rdunif(break_count_1, 1, L1);
			
			sperm1 = p2.addRecombinant(genome1, genome2, breaks_1, NULL, NULL, NULL, "M");
			sperm2 = p2.addRecombinant(genome2, genome1, breaks_1, NULL, NULL, NULL, "M");
			
			break_count_2 = rpois(1, R * (L1+1));
			breaks_2 = rdunif(break_count_2, 1, L1);
			
			sperm3 = p2.addRecombinant(genome1, genome2, breaks_2, NULL, NULL, NULL, "M");
			sperm4 = p2.addRecombinant(genome2, genome1, breaks_2, NULL, NULL, NULL, "M");
			
			if (individual.tag == 1)
			{
				if (size(breaks_1) > 0)
				{
					breaks_1 = sort(breaks_1);
					// output breakpoints
					catn(c("BP_1", breaks_1));
					// calculate and output the recombinant segment sizes
					if (break_count_1 == 1)
					{
						catn(c("RS_1", breaks_1, L1-breaks_1+1));
					} else
					{
						RS = c();
						i = 0;
						for (bp in breaks_1)
						{
							if (bp == breaks_1[0])
							{ RS = c(RS, bp); i = i+1; }
							else if (bp == breaks_1[break_count_1-1] & break_count_1 != 2)
							{ RS = c(RS, bp-breaks_1[i-1], L1-bp+1); }
							else if (bp == breaks_1[break_count_1-1] & break_count_1 == 2)
							{ RS = c(RS, bp-breaks_1[0], L1-bp+1); }
							else
							{ RS = c(RS, bp-breaks_1[i-1]); i = i+1; }
						}
						catn(c("RS_1", RS));
					}
				} else
				{
					catn("NO Recombination");
				}
				catn(c("SG_" + meiosisCount + ".1", sperm1.genome1.mutations.position));
				catn(c("SG_" + meiosisCount + ".2", sperm2.genome1.mutations.position));
				
				if (size(breaks_2) > 0)
				{
					breaks_2 = sort(breaks_2);
					// output breakpoints
					catn(c("BP_2", breaks_2));
					// calculate and output the recombinant segment sizes
					if (break_count_2 == 1)
					{
						catn(c("RS_2", breaks_2, L1-breaks_2+1));
					} else
					{
						RS = c();
						i = 0;
						for (bp in breaks_2)
						{
							if (bp == breaks_2[0])
							{ RS = c(RS, bp); i = i+1; }
							else if (bp == breaks_2[break_count_2-1] & break_count_2 != 2)
							{ RS = c(RS, bp-breaks_2[i-1], L1-bp+1); }
							else if (bp == breaks_2[break_count_2-1] & break_count_2 == 2)
							{ RS = c(RS, bp-breaks_2[0], L1-bp+1); }
							else
							{ RS = c(RS, bp-breaks_2[i-1]); i = i+1; }
						}
						catn(c("RS_2", RS));
					}
				} else
				{
					catn("NO Recombination");
				}
				catn(c("SG_" + meiosisCount + ".3", sperm3.genome1.mutations.position));
				catn(c("SG_" + meiosisCount + ".4", sperm4.genome1.mutations.position));
			}
		}
		else if (individual.sex == "F")
		{
			// a female will generate one egg per meiosis (and three polar bodies)
			break_count = rpois(1, R * (L1+1));
			breaks = rdunif(break_count, 1, L1);
			
			// make the egg by recombination, with a random initial strand
			if (runif(1) <= 0.5)
				egg = p2.addRecombinant(genome1, genome2, breaks, NULL, NULL, NULL, "F");
			else
				egg = p2.addRecombinant(genome2, genome1, breaks, NULL, NULL, NULL, "F");
		}
	}
}

// p2, haploid gametes, reproduces by generating diploid zygotes into p1
20001 reproduction(p2, "F")
{
	// each egg chooses a random sperm as a "mate"; we mark sperm as used in a
	// fertilization by tagging them, so each one gets just one fertilization
	mate = p2.sampleIndividuals(1, sex="M", tag=0);
	
	// mark the sperm in question as used, so it can't be chosen again
	mate.tag = 1;
	
	// generate the child from the two haploid gametes; here we allow SLiM to
	// choose the sex of the zygote randomly, since we're not modeling the X/Y
	// note that we turned off mutation beforehand, so there shouldn't be any
	child = p1.addRecombinant(individual.genome1, NULL, NULL, mate.genome1, NULL, NULL);
}

20001 early()
{	
	// after reproduction, whichever population just reproduced dies off; we
	// are modeling strict alternation of generations with no overlap, although
	// it would not be hard to change that if we wanted to	
	if (sim.generation % 2 == 0)
	{
		// we just generated haploids; purge the diploids
		p1.fitnessScaling = 0.0;
		
		// the new haploids will be reproducing soon; reset their "used" tags
		p2.individuals.tag = 0;
		
		// we do not want mutation be involved in fertilization, so turn it off
		sim.chromosome.setMutationRate(0.0);
	}
	else
	{
		// we just generated diploids; purge the haploids
		p2.fitnessScaling = 0.0;
		
		/* may not be needed
		// we have density-dependent population regulation in the diploid stage
		p1.fitnessScaling = K / p1.individualCount;
		*/
		
		// we want mutation during meiosis, so turn it on
		sim.chromosome.setMutationRate(MU);
	}
}

20001 late()
{
	// output and finish
	sim.simulationFinished();
}

