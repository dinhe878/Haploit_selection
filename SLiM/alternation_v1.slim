/*
Diploid-haploid alternation model
29 November 2018
Authors: Ding He, Ben Haller

Description:
This script models diploid individuals and haploid gametes alternately, using addRecombinant() to generate them with the additional control it provides. The generation of recombination breakpoints are controlled by script not SLiM (this is something that could perhaps be facilitated by a new method on Chromosome). The adults are kepted in one subpop and gametes in another, so the selection can be introduced in either/both diploid/haploid phases.

Although this is a non-Wright-Fisher (nonWF) model, we constrain non-overlapping generations and constant population size as a WF-like behavior for simplicity. This can be modified later if more realistic/complex scenarios are desired.

This is a sexual model at the diploid stage, and "M" also represents sperm and "F" eggs; that could be removed, for a model of hermaphroditic gametes. The sex ratio is now ~ 50/50.

The output for this script is within-ejaculate sperm SNPs (mutational positions) that represent their genetic variations.

This is a commandline version - some parameters are specified via commandline options:

k, carrying capacity (diploid) / founding population size
MU, mutation rate
R, recombination rate
L, chromosome length
mc, meiosis count per diploid individual
smu, number(s) of male to output sperm genetics (i.e. print to file) during the alternation phase
st, selection type: p - positive, n - negative, neu - neutral 
rs, recombination scheme
la, relevant parameters/equation associated recombination scheme
rsF, output file name of recombinant segment sizes
sgmutF, output file name of sperm SNPs

*/
initialize()
{
	defineConstant("K", k);		// carrying capacity (diploid), value is passed via commandline
	defineConstant("MeioC", mc);	// meiosis count per diploid individual, value is passed via commandline
	defineConstant("SeedMaleNum", smu);	// number(s) of male to output sperm genetics (i.e. print to file) during the alternation phase, value is passed via commandline
	defineConstant("SelectionType", st);	// selection type, value is passed via commandline
	defineConstant("RecScheme", rs);	// decide how many recombination per meiosis: 0 - no recombination, 1 - specific # of recombination, 2 - draw from poisson with lammda #
	defineConstant("rsParam", la);	// 0 when rs==0, n (exact number of meiotic recombinations) when rs==1, lammda (specify equation) when rs==2
	defineConstant("RS_file", rsF);	// output file name of recombinant segment sizes
	defineConstant("SGmut_file", sgmutF);	// output file name of sperm SNPs
	
	initializeSLiMModelType("nonWF");
	initializeSex("A");
	initializeMutationRate(MU);
	
	// decide selection type or neutral
	if (SelectionType == "p")
	{
		initializeMutationType("m1", 0.5, "f", 0.0);		// neutral
		m1.convertToSubstitution = T;
		initializeMutationType("m2", 1.0, "f", 0.5);		// dominant beneficial
		//m2.convertToSubstitution = T;
	} else if (SelectionType == "n")
	{
		initializeMutationType("m1", 0.5, "f", 0.0);		// neutral
		m1.convertToSubstitution = T;
		initializeMutationType("m2", 1.0, "f", -0.5);	// dominant deleterious
		//m2.convertToSubstitution = T;
	} else if (SelectionType == "neu")
	{
		initializeMutationType("m1", 0.5, "f", 0.0);		// neutral
		m1.convertToSubstitution = T;
	}
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(R);
	//setSeed(seed);		// specify seed if necessary	
}

// Burn-in phase
1:19999 reproduction(p1)
{
	for (i in seqLen(K))
	{
		Father = subpop.sampleIndividuals(1, sex="M");
		Mother = subpop.sampleIndividuals(1, sex="F");
		child = subpop.addCrossed(Mother, Father);
	}
	self.active = 0;	// done generating all offsprings, don't call us again this generation
}

1 early()
{
	sim.addSubpop("p1", K);		// start p1 with K diploid adults
	sim.addSubpop("p2", 0);		// start p2 with 0 haploid gametes
	
	sim.setValue("Selection_gen_counter", 1);		// Generation counter after the directional selection kicking in
}

1:19999 early()
{
	// non-overlapping generations
	inds = p1.individuals;
	adults = inds[inds.age > 0];
	adults.fitnessScaling = 0.0;
}

/*
late ()
{
	// check for whether the generations are overlapping
	catn(sim.generation + ": " + paste(sort(p1.individuals.age)));
}
*/

19999:20005 late()
{	
	// tag the randomly selected individual(s) so their producing within-ejaculate sperms will be output
	outputInd = p1.sampleIndividuals(SeedMaleNum, sex="M");
	n = 1;
	for (ind in outputInd) { ind.tag = n; n = n + 1; }
}

// p1, diploid individuals, reproduces by generating haploid gametes into p2
20000:20006 reproduction(p1)
{
	// each diploid undergo meiosis #times (according to the pre-difined "MeioC" parameter)
	// this could depend on genetics, or be drawn from a Poisson, or whatever
	// since every egg in this model reproduces, this is the female litter size,
	// so it should be >= 2 to ensure population viability	
	
	rs_oneLine = NULL;
	
	// recording the founding father genomes (FG)
	if (individual.sex == "M" & individual.tag != 0)
	{
		Sperm_batch_title = paste(c("####### Generation " + sim.generation + " #######\n", "##### This is the ", individual.tag, " within-ejaculate sperm batch #####"));
		catn(Sperm_batch_title);
		writeFile(SGmut_file+"."+individual.tag, Sperm_batch_title, append = T);
		FG_1_line = paste(c("FG_1", genome1.mutations.position));
		FG_2_line = paste(c("FG_2", genome2.mutations.position));	
		catn(FG_1_line);
		catn(FG_2_line);
		writeFile(SGmut_file+"."+individual.tag, FG_1_line, append = T);
		writeFile(SGmut_file+"."+individual.tag, FG_2_line, append = T);
		writeFile(RS_file+"."+individual.tag, Sperm_batch_title, append = T);
	}
		
	for (meiosisCount in 1:MeioC)
	{
		// we're modeling alternation of generations in ferns, which just release
		// gametes into their environment; there is no "mate choice" at the
		// diploid stage, so we just generate gametes from the focal individual	
		if (individual.sex == "M")
		{
			// a male will generate four sperm per meiosis (two unrelated symmetric pairs)
			if (RecScheme == 0)
			{
				break_count_1 = 0;
				breaks_1 = NULL;
				break_count_2 = 0;
				breaks_2 = NULL;
			} else if (RecScheme == 1)
			{
				break_count_1 = rsParam;
				breaks_1 = rdunif(break_count_1, 1, L-1);
				break_count_2 = rsParam;
				breaks_2 = rdunif(break_count_2, 1, L-1);
			} else if (RecScheme == 2)
			{
				break_count_1 = rpois(1, rsParam);
				breaks_1 = rdunif(break_count_1, 1, L-1);
				break_count_2 = rpois(1, rsParam);
				breaks_2 = rdunif(break_count_2, 1, L-1);
			}
			sperm1 = p2.addRecombinant(genome1, genome2, breaks_1, NULL, NULL, NULL, "M");
			sperm2 = p2.addRecombinant(genome2, genome1, breaks_1, NULL, NULL, NULL, "M");			
			sperm3 = p2.addRecombinant(genome1, genome2, breaks_2, NULL, NULL, NULL, "M");
			sperm4 = p2.addRecombinant(genome2, genome1, breaks_2, NULL, NULL, NULL, "M");
			
			// outputing the selected male's within-ejaculate sperms' SNPs and recombinant sizes			
			
			RS_lines = NULL;		// assembling recombinant segment sizes

			if (individual.tag != 0)
			{				
				if (size(breaks_1) > 0)
				{
					breaks_1 = sort(breaks_1);
					// output breakpoints
					catn(c("BP_1", breaks_1));
					// calculate and output the recombinant segment sizes
					if (break_count_1 == 1)
					{
						catn(c("RS_1", breaks_1, L-breaks_1));
						RS_lines = c(RS_lines, breaks_1, L-breaks_1);
					} else
					{
						RS = c();
						i = 0;
						for (bp in breaks_1)
						{
							if (bp == breaks_1[0])
							{ RS = c(RS, bp); i = i+1; }
							else if (bp == breaks_1[break_count_1-1] & break_count_1 != 2)
							{ RS = c(RS, bp-breaks_1[i-1], L-bp); }
							else if (bp == breaks_1[break_count_1-1] & break_count_1 == 2)
							{ RS = c(RS, bp-breaks_1[0], L-bp); }
							else
							{ RS = c(RS, bp-breaks_1[i-1]); i = i+1; }
						}
						catn(c("RS_1", RS));
						RS_lines = c(RS_lines, RS);
					}
				} else
				{
					catn("NO Recombination");
				}
				catn(c("SG_" + meiosisCount + ".1", sperm1.genome1.mutations.position));
				catn(c("SG_" + meiosisCount + ".2", sperm2.genome1.mutations.position));
				SGMut_line = paste(c("SG_" + meiosisCount + ".1", sperm1.genome1.mutations.position));
				writeFile(SGmut_file+"."+individual.tag, SGMut_line, append = T);
				SGMut_line = paste(c("SG_" + meiosisCount + ".2", sperm2.genome1.mutations.position));
				writeFile(SGmut_file+"."+individual.tag, SGMut_line, append = T);
				
				if (size(breaks_2) > 0)
				{
					breaks_2 = sort(breaks_2);
					// output breakpoints
					catn(c("BP_2", breaks_2));
					// calculate and output the recombinant segment sizes
					if (break_count_2 == 1)
					{
						catn(c("RS_2", breaks_2, L-breaks_2));
						RS_lines = c(RS_lines, breaks_2, L-breaks_2);
					} else
					{
						RS = c();
						i = 0;
						for (bp in breaks_2)
						{
							if (bp == breaks_2[0])
							{ RS = c(RS, bp); i = i+1; }
							else if (bp == breaks_2[break_count_2-1] & break_count_2 != 2)
							{ RS = c(RS, bp-breaks_2[i-1], L-bp); }
							else if (bp == breaks_2[break_count_2-1] & break_count_2 == 2)
							{ RS = c(RS, bp-breaks_2[0], L-bp); }
							else
							{ RS = c(RS, bp-breaks_2[i-1]); i = i+1; }
						}
						catn(c("RS_2", RS));
						RS_lines = c(RS_lines, RS);
					}
				} else
				{
					catn("NO Recombination");
				}
				catn(c("SG_" + meiosisCount + ".3", sperm3.genome1.mutations.position));
				catn(c("SG_" + meiosisCount + ".4", sperm4.genome1.mutations.position));
				SGMut_line = paste(c("SG_" + meiosisCount + ".3", sperm3.genome1.mutations.position));
				writeFile(SGmut_file+"."+individual.tag, SGMut_line, append = T);
				SGMut_line = paste(c("SG_" + meiosisCount + ".4", sperm4.genome1.mutations.position));
				writeFile(SGmut_file+"."+individual.tag, SGMut_line, append = T);
			
				// write to the RS_file, all in one line
				if (meiosisCount < MeioC) 
				{
					rs_oneLine = c(rs_oneLine, RS_lines);
				} else
				{
					rs_file = paste(rs_oneLine);
					if (!writeFile(RS_file+"."+individual.tag, rs_file, append = T)) { stop("Error writing RS_file."); }
				}				
			}
		}
		else if (individual.sex == "F")
		{
			// a female will generate one egg per meiosis (and three polar bodies)
			break_count = rpois(1, rsParam);
			breaks = rdunif(break_count, 1, L-1);
			
			// make the egg by recombination, with a random initial strand
			if (runif(1) <= 0.5)
				egg = p2.addRecombinant(genome1, genome2, breaks, NULL, NULL, NULL, "F");
			else
				egg = p2.addRecombinant(genome2, genome1, breaks, NULL, NULL, NULL, "F");
		}
	}
}

// p2, haploid gametes, reproduces by generating diploid zygotes into p1
20000:20006 reproduction(p2, "F")
{
	// each egg chooses a random sperm as a "mate"; we mark sperm as used in a
	// fertilization by tagging them, so each one gets just one fertilization
	mate = p2.sampleIndividuals(1, sex="M", tag=0);
	
	// mark the sperm in question as used, so it can't be chosen again
	mate.tag = 1;
	
	// generate the child from the two haploid gametes; here we allow SLiM to
	// choose the sex of the zygote randomly, since we're not modeling the X/Y
	// note that we turned off mutation beforehand, so there shouldn't be any
	child = p1.addRecombinant(individual.genome1, NULL, NULL, mate.genome1, NULL, NULL);
}

20000:20006 early()
{	
	// after reproduction, whichever population just reproduced dies off; we
	// are modeling strict alternation of generations with no overlap, although
	// it would not be hard to change that if we wanted to
		
	// this is the early-stage for the diploid phase
	if (sim.generation % 2 == 0)
	{
		catn("################################################################################");
		catn("Alternation diploid phase gen " + sim.getValue("Selection_gen_counter"));
		sim.setValue("Selection_gen_counter", sim.getValue("Selection_gen_counter") + 1);

		catn("diploid individual count: " + p1.individualCount);
		
		// introduce non-neutral mutations
		if (SelectionType == "p" | SelectionType == "n")
		{
			catn("Directional selection starts now, gen " + sim.getValue("Selection_gen_counter"));
			mutant = sample(p1.individuals.genomes, 10);	// 10 genomes (1% of p1 2*500 genomes)
			mutant.addNewDrawnMutation(m2, 100000);
			sim.setValue("Selection_gen_counter", sim.getValue("Selection_gen_counter") + 1);
		} else
		{
			catn("Neutral");
		}

		catn("################################################################################");

		// we just generated haploids; purge the diploids
		p1.fitnessScaling = 0.0;
		
		// the new haploids will be reproducing soon; reset their "used" tags
		p2.individuals.tag = 0;
		
		// we do not want mutation be involved in fertilization, so turn it off
		sim.chromosome.setMutationRate(0.0);
	}
	// this is the early-stage for the haploid phase
	else
	{
		catn("################################################################################");
		catn("Alternation haploid phase gen " + sim.getValue("Selection_gen_counter"));
		sim.setValue("Selection_gen_counter", sim.getValue("Selection_gen_counter") + 1);
	
		catn("haploid individual (sperm) count: " + p2.individualCount);
		catn("################################################################################");

		// we just generated diploids; purge the haploids
		p2.fitnessScaling = 0.0;
		
		// we have density-dependent population size regulation in the diploid stage
		p1.fitnessScaling = K / p1.individualCount;
		
		// we want mutation during meiosis, so turn it on
		sim.chromosome.setMutationRate(MU);
		
		// reset the newly generated diploids tags, so the new randomly selected individual(s)' within-ejaculate sperms will be output
		p1.individuals.tag = 0;
	}
}

20006 late()
{
	// output and finish
	sim.simulationFinished();
}

